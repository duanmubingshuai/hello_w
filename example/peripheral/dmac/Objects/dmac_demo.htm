<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\dmac_demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\dmac_demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sun Oct 09 14:24:16 2022
<BR><P>
<H3>Maximum Stack Usage =        248 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
DMA_ProcessEvent &rArr; demo_dma_test &rArr; dbg_printf &rArr; log_vsprintf &rArr; number
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[10]">AACI_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">AACI_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">AACI_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[17]">CAN_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[15]">CHLCD_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[11]">CLCD_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1a]">CPU_CLCD_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[23]">DMA_ProcessEvent</a> from dmac_demo.o(i.DMA_ProcessEvent) referenced from osal_dmac.o(.constdata)
 <LI><a href="#[12]">ENET_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[16]">FLEXRAY_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from bb_rom_sym_m0.txt(ABSOLUTE) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[19]">I2C_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[18]">LIN_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[2e]">LL_ENC_AES128_Encrypt1</a> from patch.o(i.LL_ENC_AES128_Encrypt1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[30]">LL_ENC_Decrypt1</a> from patch.o(i.LL_ENC_Decrypt1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[2f]">LL_ENC_Encrypt1</a> from patch.o(i.LL_ENC_Encrypt1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[2b]">LL_IRQHandler1</a> from patch.o(i.LL_IRQHandler1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[22]">LL_ProcessEvent</a> from bb_rom_sym_m0.txt(ABSOLUTE) referenced from osal_dmac.o(.constdata)
 <LI><a href="#[35]">LL_SetDataLengh1</a> from patch.o(i.LL_SetDataLengh1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[3a]">LL_set_default_conn_params1</a> from patch.o(i.LL_set_default_conn_params1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[a]">MCIA_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[b]">MCIB_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from bb_rom_sym_m0.txt(ABSOLUTE) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from bb_rom_sym_m0.txt(ABSOLUTE) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1c]">SPI_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_armcm0.o(i.SystemInit) referenced from startup_armcm0.o(.text)
 <LI><a href="#[8]">TIM0_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[9]">TIM2_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[c]">UART0_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[d]">UART1_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[e]">UART2_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1b]">UART3_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[f]">UART4_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[13]">USBDC_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[14]">USBHC_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[6]">WDT_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[20]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_armcm0.o(.text)
 <LI><a href="#[1e]">_hard_fault</a> from jump_table.o(i._hard_fault) referenced from jump_table.o(.emb_text)
 <LI><a href="#[3c]">_uart_putc</a> from my_printf.o(i._uart_putc) referenced from my_printf.o(i.dbg_printf)
 <LI><a href="#[31]">config_RTC1</a> from patch.o(i.config_RTC1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[3b]">dma_cb</a> from dmac_demo.o(i.dma_cb) referenced from dmac_demo.o(i.DMA_Demo_Init)
 <LI><a href="#[3e]">dma_wakeup_handler</a> from dma.o(i.dma_wakeup_handler) referenced from dma.o(i.hal_dma_init)
 <LI><a href="#[3d]">hal_DMA_IRQHandler</a> from dma.o(i.hal_DMA_IRQHandler) referenced from dma.o(i.dma_wakeup_handler)
 <LI><a href="#[3d]">hal_DMA_IRQHandler</a> from dma.o(i.hal_DMA_IRQHandler) referenced from dma.o(i.hal_dma_init)
 <LI><a href="#[29]">hal_UART0_IRQHandler</a> from uart.o(_section_sram_code_) referenced from uart.o(i.uart_hw_init)
 <LI><a href="#[29]">hal_UART0_IRQHandler</a> from uart.o(_section_sram_code_) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[44]">hal_UART1_IRQHandler</a> from uart.o(_section_sram_code_) referenced from uart.o(i.uart_hw_init)
 <LI><a href="#[40]">hal_gpio_sleep_handler</a> from gpio.o(i.hal_gpio_sleep_handler) referenced from gpio.o(i.hal_gpio_init)
 <LI><a href="#[3f]">hal_gpio_wakeup_handler</a> from gpio.o(i.hal_gpio_wakeup_handler) referenced from gpio.o(i.hal_gpio_init)
 <LI><a href="#[25]">hal_pwrmgr_sleep_process</a> from pwrmgr.o(i.hal_pwrmgr_sleep_process) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[26]">hal_pwrmgr_wakeup_process</a> from pwrmgr.o(i.hal_pwrmgr_wakeup_process) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[28]">hard_fault</a> from jump_table.o(.emb_text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[21]">hw_spif_cache_config</a> from flash.o(i.hw_spif_cache_config) referenced from flash.o(i.hal_spif_cache_init)
 <LI><a href="#[34]">l2capPocessFragmentTxData</a> from patch.o(i.l2capPocessFragmentTxData) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[39]">llConnTerminate1</a> from patch.o(i.llConnTerminate1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[36]">llProcessTxData1</a> from patch.o(i.llProcessTxData1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[38]">ll_adptive_adj_next_time1</a> from patch.o(i.ll_adptive_adj_next_time1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[37]">ll_generateTxBuffer1</a> from patch.o(i.ll_generateTxBuffer1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[2a]">ll_hw_go1</a> from patch.o(i.ll_hw_go1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[1d]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[24]">osalInitTasks</a> from osal_dmac.o(i.osalInitTasks) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[41]">osal_idle_task</a> from pwrmgr.o(_section_sram_code_) referenced from pwrmgr.o(i.hal_pwrmgr_init)
 <LI><a href="#[2c]">rf_calibrate1</a> from rf_phy_driver.o(i.rf_calibrate1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[2d]">rf_phy_change_cfg0</a> from rf_phy_driver.o(i.rf_phy_change_cfg0) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[27]">rf_phy_ini</a> from rf_phy_driver.o(i.rf_phy_ini) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[43]">uart_wakeup_process_0</a> from uart.o(i.uart_wakeup_process_0) referenced from uart.o(i.hal_uart_init)
 <LI><a href="#[42]">uart_wakeup_process_1</a> from uart.o(i.uart_wakeup_process_1) referenced from uart.o(i.hal_uart_init)
 <LI><a href="#[33]">wakeupProcess1</a> from patch.o(i.wakeupProcess1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[32]">wakeup_init1</a> from patch.o(i.wakeup_init1) referenced from patch.o(_section_xip_code_)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init (via Veneer)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_adptive_adj_next_time1 (via Veneer)
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf (via Veneer)
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_low_power_io_init (via Veneer)
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init (via Veneer)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_init (via Veneer)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_dma_test (via Veneer)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init (via Veneer)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init (via Veneer)
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Encrypt1 (via Veneer)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Decrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>LL_ENC_AES128_Encrypt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Rand (via Veneer)
</UL>

<P><STRONG><a name="[55]"></a>LL_ENC_AES128_Encrypt0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finidv (via Veneer)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_AES128_Encrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[57]"></a>LL_ENC_GenerateNonce</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Encrypt1 (via Veneer)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Decrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[56]"></a>LL_ENC_LoadKey</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Encrypt1 (via Veneer)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Decrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[ae]"></a>LL_Init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[91]"></a>LL_InitConnectContext</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init (via Veneer)
</UL>

<P><STRONG><a name="[22]"></a>LL_ProcessEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> osal_dmac.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>LL_SetDataLengh0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetDataLengh1 (via Veneer)
</UL>

<P><STRONG><a name="[70]"></a>LL_set_default_conn_params0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_set_default_conn_params1 (via Veneer)
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>WaitRTCCount</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x (via Veneer)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calibration (via Veneer)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_RTC1 (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_96MXtal_by_rcTracking (via Veneer)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_16MXtal_by_rcTracking (via Veneer)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Output (via Veneer)
</UL>

<P><STRONG><a name="[b8]"></a>__ARM_common_switch8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tp_cal (via Veneer)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rxDcoc_cfg (via Veneer)
</UL>

<P><STRONG><a name="[bc]"></a>app_wakeup_process</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[f5]"></a>clk_get_pclk</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init (via Veneer)
</UL>

<P><STRONG><a name="[a7]"></a>clk_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[4f]"></a>config_RTC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_enter_sleep_rtc_reset (via Veneer)
</UL>

<P><STRONG><a name="[eb]"></a>disableSleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock (via Veneer)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init (via Veneer)
</UL>

<P><STRONG><a name="[4e]"></a>drv_disable_irq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock (via Veneer)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf (via Veneer)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_tag_flush (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_unlock (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_lock (via Veneer)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_enter_sleep_rtc_reset (via Veneer)
</UL>

<P><STRONG><a name="[53]"></a>drv_enable_irq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock (via Veneer)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf (via Veneer)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_tag_flush (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_unlock (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_lock (via Veneer)
</UL>

<P><STRONG><a name="[a5]"></a>drv_irq_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[72]"></a>efuse_read</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finidv (via Veneer)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_efuse_chip_version_check (via Veneer)
</UL>

<P><STRONG><a name="[c4]"></a>enableSleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config (via Veneer)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init (via Veneer)
</UL>

<P><STRONG><a name="[51]"></a>enter_sleep_off_mode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_enter_sleep_rtc_reset (via Veneer)
</UL>

<P><STRONG><a name="[9f]"></a>getTxBufferSize</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_generateTxBuffer1 (via Veneer)
</UL>

<P><STRONG><a name="[a0]"></a>get_tx_read_ptr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_generateTxBuffer1 (via Veneer)
</UL>

<P><STRONG><a name="[97]"></a>llConnTerminate0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConnTerminate1 (via Veneer)
</UL>

<P><STRONG><a name="[a2]"></a>llEnqueueCtrlPkt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_generateTxBuffer1 (via Veneer)
</UL>

<P><STRONG><a name="[98]"></a>llProcessChanMap</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConnTerminate1 (via Veneer)
</UL>

<P><STRONG><a name="[99]"></a>llProcessTxData0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessTxData1 (via Veneer)
</UL>

<P><STRONG><a name="[6a]"></a>llSecAdvAllow</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[6b]"></a>llSetupSecAdvEvt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[6e]"></a>llSetupSecInit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[6d]"></a>llSetupSecScan</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[5a]"></a>ll_debug_output</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[5d]"></a>ll_hw_clr_irq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[9c]"></a>ll_hw_get_anchor</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_adptive_adj_next_time1 (via Veneer)
</UL>

<P><STRONG><a name="[5b]"></a>ll_hw_get_irq_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[9a]"></a>ll_hw_get_loop_cycle</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_adptive_adj_next_time1 (via Veneer)
</UL>

<P><STRONG><a name="[9e]"></a>ll_hw_get_tfifo_wrptr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_generateTxBuffer1 (via Veneer)
</UL>

<P><STRONG><a name="[5c]"></a>ll_hw_get_tr_mode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go1 (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[c3]"></a>ll_hw_ign_rfifo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[b4]"></a>ll_hw_set_crc_fmt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_bb_cfg (via Veneer)
</UL>

<P><STRONG><a name="[bf]"></a>ll_hw_set_empty_head</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[c1]"></a>ll_hw_set_loop_timeout</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[6c]"></a>ll_hw_set_rx_timeout</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go1 (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[c0]"></a>ll_hw_set_rx_timeout_1st</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[c2]"></a>ll_hw_set_timing</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[b7]"></a>ll_hw_tx2rx_timing_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[9d]"></a>ll_hw_write_tfifo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_generateTxBuffer1 (via Veneer)
</UL>

<P><STRONG><a name="[66]"></a>ll_processBasicIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_secondaryScanSRX (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_secondaryInitSRX (via Veneer)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_secondaryAdvTRX (via Veneer)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_ScanTRX (via Veneer)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[5e]"></a>ll_processExtAdvIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[60]"></a>ll_processExtInitIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[5f]"></a>ll_processExtScanIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[61]"></a>ll_processPrdAdvIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[62]"></a>ll_processPrdScanIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[69]"></a>ll_schedule_next_event</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[74]"></a>log_printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hard_fault (via Veneer)
</UL>

<P><STRONG><a name="[ba]"></a>osalTimeUpdate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[7c]"></a>osal_init_system</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[ac]"></a>osal_mem_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[90]"></a>osal_mem_set_heap</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init (via Veneer)
</UL>

<P><STRONG><a name="[84]"></a>osal_memcmp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finidv (via Veneer)
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConnTerminate1 (via Veneer)
</UL>

<P><STRONG><a name="[a3]"></a>osal_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go1 (via Veneer)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Rand (via Veneer)
</UL>

<P><STRONG><a name="[ad]"></a>osal_memset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[7d]"></a>osal_pwrmgr_device</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[4c]"></a>osal_pwrmgr_powerconserve0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_idle_task (via Veneer)
</UL>

<P><STRONG><a name="[cc]"></a>osal_start_reload_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Demo_Init (via Veneer)
</UL>

<P><STRONG><a name="[7e]"></a>osal_start_system</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[83]"></a>read_LL_remainder_time</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_RTC1 (via Veneer)
</UL>

<P><STRONG><a name="[59]"></a>read_current_fine_time</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go1 (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Rand (via Veneer)
</UL>

<P><STRONG><a name="[80]"></a>rtc_get_counter</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_16MXtal_by_rcTracking (via Veneer)
</UL>

<P><STRONG><a name="[c5]"></a>setSleepMode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config (via Veneer)
</UL>

<P><STRONG><a name="[a4]"></a>set_max_length</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go1 (via Veneer)
</UL>

<P><STRONG><a name="[81]"></a>set_sleep_flag</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_16MXtal_by_rcTracking (via Veneer)
</UL>

<P><STRONG><a name="[bb]"></a>set_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[78]"></a>spif_cmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_flash_info (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x (via Veneer)
</UL>

<P><STRONG><a name="[95]"></a>spif_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spif_cache_config (via Veneer)
</UL>

<P><STRONG><a name="[d2]"></a>spif_erase_sector</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_dma_test (via Veneer)
</UL>

<P><STRONG><a name="[79]"></a>spif_rddata</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_flash_info (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x (via Veneer)
</UL>

<P><STRONG><a name="[a1]"></a>update_tx_read_ptr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_generateTxBuffer1 (via Veneer)
</UL>

<P><STRONG><a name="[a6]"></a>init_config</STRONG> (Thumb, 586 bytes, Stack size 24 bytes, patch.o(_section_xip_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_config
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSleep (via Veneer)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSleepMode (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[c7]"></a>TRNG_INIT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, patch.o(_section_xip_code_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Rand
</UL>

<P><STRONG><a name="[c8]"></a>TRNG_Rand</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, patch.o(_section_xip_code_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_AES128_Encrypt (via Veneer)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_INIT
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
</UL>

<P><STRONG><a name="[af]"></a>DMA_Demo_Init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, dmac_demo.o(i.DMA_Demo_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DMA_Demo_Init &rArr; dbg_printf &rArr; log_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_reload_timer (via Veneer)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_init_channel
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[23]"></a>DMA_ProcessEvent</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dmac_demo.o(i.DMA_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DMA_ProcessEvent &rArr; demo_dma_test &rArr; dbg_printf &rArr; log_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_dma_test
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_dmac.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>dbg_printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, my_printf.o(i.dbg_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dbg_printf &rArr; log_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_cb
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_dma_test
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ProcessEvent
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Demo_Init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[a9]"></a>dbg_printf_init</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, my_printf.o(i.dbg_printf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dbg_printf_init &rArr; hal_uart_init &rArr; uart_hw_init &rArr; uart_hw_deinit &rArr; hal_clk_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[cd]"></a>demo_dma_test</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, dmac_demo.o(i.demo_dma_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = demo_dma_test &rArr; dbg_printf &rArr; log_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_erase_sector (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_wait_channel_complete
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_stop_channel
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_start_channel
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_config_channel
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ProcessEvent
</UL>

<P><STRONG><a name="[3b]"></a>dma_cb</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dmac_demo.o(i.dma_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dma_cb &rArr; dbg_printf &rArr; log_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dmac_demo.o(i.DMA_Demo_Init)
</UL>
<P><STRONG><a name="[3d]"></a>hal_DMA_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, dma.o(i.hal_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hal_DMA_IRQHandler &rArr; hal_dma_stop_channel &rArr; hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_stop_channel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dma.o(i.dma_wakeup_handler)
<LI> dma.o(i.hal_dma_init)
</UL>
<P><STRONG><a name="[45]"></a>hal_GPIO_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio.o(i.hal_GPIO_IRQHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_GPIO_IRQHandler &rArr; hal_gpioin_event &rArr; hal_gpio_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_event
</UL>

<P><STRONG><a name="[d3]"></a>hal_dma_config_channel</STRONG> (Thumb, 480 bytes, Stack size 32 bytes, dma.o(i.hal_dma_config_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_dma_config_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_dma_test
</UL>

<P><STRONG><a name="[ca]"></a>hal_dma_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dma.o(i.hal_dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_dma_init &rArr; hal_pwrmgr_register
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_reset (via Veneer)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_enable (via Veneer)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Demo_Init
</UL>

<P><STRONG><a name="[cb]"></a>hal_dma_init_channel</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dma.o(i.hal_dma_init_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hal_dma_init_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Demo_Init
</UL>

<P><STRONG><a name="[d5]"></a>hal_dma_start_channel</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dma.o(i.hal_dma_start_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_dma_start_channel &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_dma_test
</UL>

<P><STRONG><a name="[d1]"></a>hal_dma_stop_channel</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, dma.o(i.hal_dma_stop_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_dma_stop_channel &rArr; hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_wait_channel_complete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_dma_test
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_DMA_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>hal_dma_wait_channel_complete</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dma.o(i.hal_dma_wait_channel_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_dma_wait_channel_complete &rArr; hal_dma_stop_channel &rArr; hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_stop_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_dma_test
</UL>

<P><STRONG><a name="[dc]"></a>hal_gpio_cfg_analog_io</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, gpio.o(i.hal_gpio_cfg_analog_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
</UL>

<P><STRONG><a name="[de]"></a>hal_gpio_fmux</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpio.o(i.hal_gpio_fmux))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_deinit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux_set
</UL>

<P><STRONG><a name="[dd]"></a>hal_gpio_fmux_set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_fmux_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_gpio_fmux_set
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
</UL>

<P><STRONG><a name="[aa]"></a>hal_gpio_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gpio.o(i.hal_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hal_gpio_init &rArr; hal_pwrmgr_register
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Demo_Init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[e2]"></a>hal_gpio_pin2pin3_control</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(i.hal_gpio_pin2pin3_control))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
</UL>

<P><STRONG><a name="[e1]"></a>hal_gpio_pin_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin2pin3_control
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_cfg_analog_io
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_write
</UL>

<P><STRONG><a name="[89]"></a>hal_gpio_pull_set</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_pull_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_gpio_pull_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_cfg_analog_io
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_clock_config (via Veneer)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_low_power_io_init (via Veneer)
</UL>

<P><STRONG><a name="[e4]"></a>hal_gpio_read</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpio.o(i.hal_gpio_read))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_sleep_handler
</UL>

<P><STRONG><a name="[e5]"></a>hal_gpio_wakeup_set</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gpio.o(i.hal_gpio_wakeup_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_gpio_wakeup_set &rArr; hal_gpio_wakeup_control
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_control
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_sleep_handler
</UL>

<P><STRONG><a name="[e6]"></a>hal_gpio_write</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, gpio.o(i.hal_gpio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_gpio_write &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
</UL>

<P><STRONG><a name="[e7]"></a>hal_gpioin_enable</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gpio.o(i.hal_gpioin_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = hal_gpioin_enable &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
</UL>

<P><STRONG><a name="[8c]"></a>hal_pwrmgr_LowCurrentLdo_enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwrmgr.o(i.hal_pwrmgr_LowCurrentLdo_enable))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_low_power_io_init (via Veneer)
</UL>

<P><STRONG><a name="[8a]"></a>hal_pwrmgr_RAM_retention</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pwrmgr.o(i.hal_pwrmgr_RAM_retention))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_low_power_io_init (via Veneer)
</UL>

<P><STRONG><a name="[50]"></a>hal_pwrmgr_RAM_retention_clr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwrmgr.o(i.hal_pwrmgr_RAM_retention_clr))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_enter_sleep_rtc_reset (via Veneer)
</UL>

<P><STRONG><a name="[8b]"></a>hal_pwrmgr_RAM_retention_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pwrmgr.o(i.hal_pwrmgr_RAM_retention_set))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_sleep_process
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_low_power_io_init (via Veneer)
</UL>

<P><STRONG><a name="[a8]"></a>hal_pwrmgr_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, pwrmgr.o(i.hal_pwrmgr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_pwrmgr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSleep (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSleep (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[db]"></a>hal_pwrmgr_lock</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSleep (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_start_channel
</UL>

<P><STRONG><a name="[94]"></a>hal_pwrmgr_register</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, pwrmgr.o(i.hal_pwrmgr_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hal_pwrmgr_register
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spif_cache_init (via Veneer)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
</UL>

<P><STRONG><a name="[25]"></a>hal_pwrmgr_sleep_process</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_sleep_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_sleep_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[4b]"></a>hal_pwrmgr_unlock</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSleep (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSleep (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_tx_empty_handler (via Veneer)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_stop_channel
</UL>

<P><STRONG><a name="[26]"></a>hal_pwrmgr_wakeup_process</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_wakeup_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_wakeup_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[d0]"></a>hal_uart_init</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, uart.o(i.hal_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hal_uart_init &rArr; uart_hw_init &rArr; uart_hw_deinit &rArr; hal_clk_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf_init
</UL>

<P><STRONG><a name="[ce]"></a>hal_uart_send_buff</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(i.hal_uart_send_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_uart_send_buff &rArr; txmit_buf_use_tx_buf &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_putc
</UL>

<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[f6]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[48]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f7]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[f8]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[f9]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[fa]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[fb]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[28]"></a>hard_fault</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, jump_table.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>AACI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>CHLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>CLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>CPU_CLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLEXRAY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>LIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>MCIA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>MCIB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>TIM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>USBDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>USBHC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[fc]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>hal_UART1_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, uart.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_UART1_IRQHandler &rArr; irq_rx_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_tx_empty_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_rx_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.uart_hw_init)
</UL>
<P><STRONG><a name="[29]"></a>hal_UART0_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, uart.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_UART0_IRQHandler &rArr; irq_rx_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_tx_empty_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_rx_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> jump_table.o(jump_table_mem_area)
<LI> uart.o(i.uart_hw_init)
</UL>
<P><STRONG><a name="[41]"></a>osal_idle_task</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pwrmgr.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osal_idle_task
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_powerconserve0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwrmgr.o(i.hal_pwrmgr_init)
</UL>
<P><STRONG><a name="[4d]"></a>hal_pwrmgr_enter_sleep_rtc_reset</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pwrmgr.o(_section_sram_code_))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep_off_mode (via Veneer)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_RTC (via Veneer)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention_clr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_16MXtal_by_rcTracking
</UL>

<P><STRONG><a name="[2e]"></a>LL_ENC_AES128_Encrypt1</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, patch.o(i.LL_ENC_AES128_Encrypt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ENC_AES128_Encrypt1
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_AES128_Encrypt0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[30]"></a>LL_ENC_Decrypt1</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, patch.o(i.LL_ENC_Decrypt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_ENC_Decrypt1
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_LoadKey (via Veneer)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_GenerateNonce (via Veneer)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[2f]"></a>LL_ENC_Encrypt1</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, patch.o(i.LL_ENC_Encrypt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_ENC_Encrypt1
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_LoadKey (via Veneer)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_GenerateNonce (via Veneer)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[2b]"></a>LL_IRQHandler1</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, patch.o(i.LL_IRQHandler1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_IRQHandler1 &rArr; ll_processBasicIRQ_secondaryScanSRX
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_secondaryScanSRX
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_secondaryInitSRX
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_secondaryAdvTRX
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_ScanTRX
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_schedule_next_event (via Veneer)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processPrdScanIRQ (via Veneer)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processPrdAdvIRQ (via Veneer)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtScanIRQ (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtInitIRQ (via Veneer)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtAdvIRQ (via Veneer)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ (via Veneer)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout (via Veneer)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_tr_mode (via Veneer)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_irq_status (via Veneer)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_clr_irq (via Veneer)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScan (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecInit (via Veneer)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecAdvEvt (via Veneer)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSecAdvAllow (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[35]"></a>LL_SetDataLengh1</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, patch.o(i.LL_SetDataLengh1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SetDataLengh1
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetDataLengh0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[3a]"></a>LL_set_default_conn_params1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, patch.o(i.LL_set_default_conn_params1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_set_default_conn_params1
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_set_default_conn_params0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_armcm0.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[ff]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[100]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[101]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[bd]"></a>__wdt_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, patch.o(i.__wdt_init))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
</UL>

<P><STRONG><a name="[71]"></a>_efuse_chip_version_check</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, phy_sec_ext.o(i._efuse_chip_version_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _efuse_chip_version_check &rArr; finidv
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_read (via Veneer)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finidv
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_sec_boot_init
</UL>

<P><STRONG><a name="[1e]"></a>_hard_fault</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, jump_table.o(i._hard_fault))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(.emb_text)
</UL>
<P><STRONG><a name="[75]"></a>_rom_sec_boot_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, phy_sec_ext.o(i._rom_sec_boot_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _rom_sec_boot_init &rArr; _efuse_chip_version_check &rArr; finidv
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_efuse_chip_version_check
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rom_boot_init
</UL>

<P><STRONG><a name="[7b]"></a>app_main</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dmac_main.o(i.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_main
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system (via Veneer)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_device (via Veneer)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>config_RTC1</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, patch.o(i.config_RTC1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = config_RTC1
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LL_remainder_time (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[76]"></a>efuse_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, phy_sec_ext.o(i.efuse_init))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_sec_boot_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
</UL>

<P><STRONG><a name="[73]"></a>finidv</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, phy_sec_ext.o(i.finidv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = finidv
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_read (via Veneer)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_AES128_Encrypt0 (via Veneer)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_efuse_chip_version_check
</UL>

<P><STRONG><a name="[f4]"></a>hal_clk_gate_disable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, clock.o(i.hal_clk_gate_disable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_deinit (via Veneer)
</UL>

<P><STRONG><a name="[96]"></a>hal_clk_gate_enable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, clock.o(i.hal_clk_gate_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init (via Veneer)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_init (via Veneer)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spif_cache_config
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_wakeup_handler (via Veneer)
</UL>

<P><STRONG><a name="[da]"></a>hal_clk_reset</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, clock.o(i.hal_clk_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_clk_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init (via Veneer)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_deinit (via Veneer)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_init (via Veneer)
</UL>

<P><STRONG><a name="[86]"></a>hal_get_flash_info</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, flash.o(i.hal_get_flash_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hal_get_flash_info &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_rddata (via Veneer)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_cmd (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_unlock
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spif_cache_config
</UL>

<P><STRONG><a name="[8e]"></a>hal_rom_boot_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, patch.o(i.hal_rom_boot_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hal_rom_boot_init &rArr; _rom_sec_boot_init &rArr; _efuse_chip_version_check &rArr; finidv
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_sec_boot_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
</UL>

<P><STRONG><a name="[92]"></a>hal_rtc_clock_config</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, clock.o(i.hal_rtc_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_rtc_clock_config &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>hal_spif_cache_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, flash.o(i.hal_spif_cache_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hal_spif_cache_init &rArr; hw_spif_cache_config &rArr; hal_get_flash_info &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register (via Veneer)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spif_cache_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>l2capPocessFragmentTxData</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, patch.o(i.l2capPocessFragmentTxData))
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[39]"></a>llConnTerminate1</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, patch.o(i.llConnTerminate1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llConnTerminate1
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConnTerminate0 (via Veneer)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessChanMap (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[36]"></a>llProcessTxData1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, patch.o(i.llProcessTxData1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llProcessTxData1
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessTxData0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[38]"></a>ll_adptive_adj_next_time1</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, patch.o(i.ll_adptive_adj_next_time1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ll_adptive_adj_next_time1
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_loop_cycle (via Veneer)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_anchor (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[37]"></a>ll_generateTxBuffer1</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, patch.o(i.ll_generateTxBuffer1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ll_generateTxBuffer1
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llEnqueueCtrlPkt (via Veneer)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_read_ptr (via Veneer)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTxBufferSize (via Veneer)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_tx_read_ptr (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_write_tfifo (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_tfifo_wrptr (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[2a]"></a>ll_hw_go1</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, patch.o(i.ll_hw_go1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ll_hw_go1
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_length (via Veneer)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout (via Veneer)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_tr_mode (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[63]"></a>ll_processBasicIRQ_SRX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, patch.o(i.ll_processBasicIRQ_SRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_processBasicIRQ_SRX
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1
</UL>

<P><STRONG><a name="[65]"></a>ll_processBasicIRQ_ScanTRX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, patch.o(i.ll_processBasicIRQ_ScanTRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_processBasicIRQ_ScanTRX
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1
</UL>

<P><STRONG><a name="[64]"></a>ll_processBasicIRQ_secondaryAdvTRX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, patch.o(i.ll_processBasicIRQ_secondaryAdvTRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_processBasicIRQ_secondaryAdvTRX
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1
</UL>

<P><STRONG><a name="[68]"></a>ll_processBasicIRQ_secondaryInitSRX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, patch.o(i.ll_processBasicIRQ_secondaryInitSRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_processBasicIRQ_secondaryInitSRX
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1
</UL>

<P><STRONG><a name="[67]"></a>ll_processBasicIRQ_secondaryScanSRX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, patch.o(i.ll_processBasicIRQ_secondaryScanSRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_processBasicIRQ_secondaryScanSRX
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1
</UL>

<P><STRONG><a name="[1d]"></a>main</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; dbg_printf &rArr; log_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spif_cache_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_clock_config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init (via Veneer)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init (via Veneer)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_init (via Veneer)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf_init (via Veneer)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf (via Veneer)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_init (via Veneer)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_low_power_io_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[24]"></a>osalInitTasks</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, osal_dmac.o(i.osalInitTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = osalInitTasks &rArr; DMA_Demo_Init &rArr; dbg_printf &rArr; log_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init (via Veneer)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Demo_Init (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[b0]"></a>rc32k_calibration</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, rf_phy_driver.o(i.rc32k_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rc32k_calibration
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[2c]"></a>rf_calibrate1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rf_phy_driver.o(i.rf_calibrate1))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rf_calibrate1 &rArr; rf_tpCal_gen_cap_arrary &rArr; rf_tp_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tpCal_gen_cap_arrary
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rxDcoc_cfg
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[b5]"></a>rf_phy_ana_cfg</STRONG> (Thumb, 228 bytes, Stack size 12 bytes, rf_phy_driver.o(i.rf_phy_ana_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rf_phy_ana_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
</UL>

<P><STRONG><a name="[b3]"></a>rf_phy_bb_cfg</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, rf_phy_driver.o(i.rf_phy_bb_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf_phy_bb_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_crc_fmt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
</UL>

<P><STRONG><a name="[2d]"></a>rf_phy_change_cfg0</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, rf_phy_driver.o(i.rf_phy_change_cfg0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rf_phy_change_cfg0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[27]"></a>rf_phy_ini</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rf_phy_driver.o(i.rf_phy_ini))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rf_phy_ini &rArr; rf_phy_bb_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_set_txPower
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_bb_cfg
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ana_cfg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_tx2rx_timing_config (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[b6]"></a>rf_phy_set_txPower</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, rf_phy_driver.o(i.rf_phy_set_txPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rf_phy_set_txPower
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
</UL>

<P><STRONG><a name="[b2]"></a>rf_rxDcoc_cfg</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, rf_phy_driver.o(i.rf_rxDcoc_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf_rxDcoc_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[b1]"></a>rf_tpCal_gen_cap_arrary</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, rf_phy_driver.o(i.rf_tpCal_gen_cap_arrary))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rf_tpCal_gen_cap_arrary &rArr; rf_tp_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tp_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[b9]"></a>rf_tp_cal</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, rf_phy_driver.o(i.rf_tp_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf_tp_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tpCal_gen_cap_arrary
</UL>

<P><STRONG><a name="[33]"></a>wakeupProcess1</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, patch.o(i.wakeupProcess1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wakeupProcess1 &rArr; wakeup_init1 &rArr; check_96MXtal_by_rcTracking
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system (via Veneer)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_init (via Veneer)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wakeup_process (via Veneer)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sleep_flag (via Veneer)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer (via Veneer)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_counter (via Veneer)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimeUpdate (via Veneer)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_tx2rx_timing_config (via Veneer)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[32]"></a>wakeup_init1</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, patch.o(i.wakeup_init1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wakeup_init1 &rArr; check_96MXtal_by_rcTracking
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_init (via Veneer)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wdt_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_96MXtal_by_rcTracking
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_16MXtal_by_rcTracking
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer (via Veneer)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_length (via Veneer)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_counter (via Veneer)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_timing (via Veneer)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout_1st (via Veneer)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout (via Veneer)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_loop_timeout (via Veneer)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_empty_head (via Veneer)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_ign_rfifo (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8f]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, main.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
</UL>

<P><STRONG><a name="[87]"></a>hal_low_power_io_init</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, main.o(i.hal_low_power_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hal_low_power_io_init &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention_set (via Veneer)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention (via Veneer)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_LowCurrentLdo_enable (via Veneer)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set (via Veneer)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>hal_rfphy_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, main.o(i.hal_rfphy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hal_rfphy_init &rArr; hal_rom_boot_init &rArr; _rom_sec_boot_init &rArr; _efuse_chip_version_check &rArr; finidv
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_set_heap (via Veneer)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rom_boot_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitConnectContext (via Veneer)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
</UL>

<P><STRONG><a name="[df]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gpio.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
</UL>

<P><STRONG><a name="[ea]"></a>hal_gpio_interrupt_enable</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gpio.o(i.hal_gpio_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_gpio_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_event
</UL>

<P><STRONG><a name="[e3]"></a>hal_gpio_retention_enable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_retention_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_gpio_retention_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_sleep_handler
</UL>

<P><STRONG><a name="[40]"></a>hal_gpio_sleep_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_sleep_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_gpio_sleep_handler &rArr; hal_gpio_wakeup_set &rArr; hal_gpio_wakeup_control
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_set
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_retention_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(i.hal_gpio_init)
</UL>
<P><STRONG><a name="[e9]"></a>hal_gpio_wakeup_control</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gpio.o(i.hal_gpio_wakeup_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_gpio_wakeup_control
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_set
</UL>

<P><STRONG><a name="[3f]"></a>hal_gpio_wakeup_handler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_wakeup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = hal_gpio_wakeup_handler &rArr; hal_gpioin_enable &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin2pin3_control
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_event_pin
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_retention_enable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(i.hal_gpio_init)
</UL>
<P><STRONG><a name="[d9]"></a>hal_gpioin_event</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, gpio.o(i.hal_gpioin_event), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_gpioin_event &rArr; hal_gpio_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_event_pin
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_GPIO_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>hal_gpioin_event_pin</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gpio.o(i.hal_gpioin_event_pin))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_event
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
</UL>

<P><STRONG><a name="[3c]"></a>_uart_putc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, my_printf.o(i._uart_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _uart_putc &rArr; hal_uart_send_buff &rArr; txmit_buf_use_tx_buf &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_printf.o(i.dbg_printf)
</UL>
<P><STRONG><a name="[cf]"></a>log_vsprintf</STRONG> (Thumb, 608 bytes, Stack size 56 bytes, my_printf.o(i.log_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = log_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
</UL>

<P><STRONG><a name="[f1]"></a>number</STRONG> (Thumb, 356 bytes, Stack size 128 bytes, my_printf.o(i.number))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = number
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_vsprintf
</UL>

<P><STRONG><a name="[f0]"></a>skip_atoi</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, my_printf.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_vsprintf
</UL>

<P><STRONG><a name="[46]"></a>irq_rx_handler</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, uart.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = irq_rx_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_UART1_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_UART0_IRQHandler
</UL>

<P><STRONG><a name="[47]"></a>irq_tx_empty_handler</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, uart.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = irq_tx_empty_handler &rArr; hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_UART1_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_UART0_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>txmit_buf_polling</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, uart.o(i.txmit_buf_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = txmit_buf_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff
</UL>

<P><STRONG><a name="[ee]"></a>txmit_buf_use_tx_buf</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, uart.o(i.txmit_buf_use_tx_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = txmit_buf_use_tx_buf &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff
</UL>

<P><STRONG><a name="[f3]"></a>uart_hw_deinit</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, uart.o(i.uart_hw_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_hw_deinit &rArr; hal_clk_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_reset (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_disable (via Veneer)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
</UL>

<P><STRONG><a name="[ed]"></a>uart_hw_init</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, uart.o(i.uart_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uart_hw_init &rArr; uart_hw_deinit &rArr; hal_clk_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_reset (via Veneer)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_enable (via Veneer)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_get_pclk (via Veneer)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_deinit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux_set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_wakeup_process_1
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_wakeup_process_0
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[43]"></a>uart_wakeup_process_0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.uart_wakeup_process_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_wakeup_process_0 &rArr; uart_hw_init &rArr; uart_hw_deinit &rArr; hal_clk_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.hal_uart_init)
</UL>
<P><STRONG><a name="[42]"></a>uart_wakeup_process_1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.uart_wakeup_process_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_wakeup_process_1 &rArr; uart_hw_init &rArr; uart_hw_deinit &rArr; hal_clk_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.hal_uart_init)
</UL>
<P><STRONG><a name="[ec]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, pwrmgr.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_wakeup_process
</UL>

<P><STRONG><a name="[d8]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dma.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_wakeup_handler
</UL>

<P><STRONG><a name="[d7]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, dma.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_wakeup_handler
</UL>

<P><STRONG><a name="[3e]"></a>dma_wakeup_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dma.o(i.dma_wakeup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_wakeup_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_enable (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dma.o(i.hal_dma_init)
</UL>
<P><STRONG><a name="[52]"></a>spif_lock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, flash.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spif_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_flash_info
</UL>

<P><STRONG><a name="[54]"></a>spif_unlock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, flash.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spif_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_flash_info
</UL>

<P><STRONG><a name="[77]"></a>_spif_wait_nobusy_x</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, flash.o(i._spif_wait_nobusy_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_rddata (via Veneer)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_cmd (via Veneer)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_flash_info
</UL>

<P><STRONG><a name="[85]"></a>hal_cache_tag_flush</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, flash.o(i.hal_cache_tag_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_cache_tag_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spif_cache_config
</UL>

<P><STRONG><a name="[21]"></a>hw_spif_cache_config</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, flash.o(i.hw_spif_cache_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hw_spif_cache_config &rArr; hal_get_flash_info &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_enable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_config (via Veneer)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_flash_info
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_tag_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spif_cache_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(i.hal_spif_cache_init)
</UL>
<P><STRONG><a name="[c6]"></a>TRNG_Output</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, patch.o(_section_xip_code_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_INIT
</UL>

<P><STRONG><a name="[be]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, patch.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
</UL>

<P><STRONG><a name="[7f]"></a>check_16MXtal_by_rcTracking</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, patch.o(i.check_16MXtal_by_rcTracking))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_16MXtal_by_rcTracking
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sleep_flag (via Veneer)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_enter_sleep_rtc_reset
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_counter (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
</UL>

<P><STRONG><a name="[82]"></a>check_96MXtal_by_rcTracking</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, patch.o(i.check_96MXtal_by_rcTracking))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_96MXtal_by_rcTracking
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
